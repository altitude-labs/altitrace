name: Rust CI

on:
  push:
    branches: [main]
    paths:
      - 'packages/api/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rustfmt.toml'
      - '.github/workflows/rust.yml'
  pull_request:
    branches: [main]
    paths:
      - 'packages/api/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rustfmt.toml'
      - '.github/workflows/rust.yml'

env:
  RUST_VERSION: "1.88"
  CARGO_TERM_COLOR: always
  CARGO_HOME: ${{ github.workspace }}/.cargo
  CARGO_TARGET_DIR: ${{ github.workspace }}/target
  BUILD_DEPENDENCIES: "build-essential cmake perl make pkg-config clang libclang-dev pkg-config libssl-dev curl git"

jobs:
  rust-fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-fmt-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.BUILD_DEPENDENCIES }}

      - name: Run rustfmt
        run: cargo fmt --all --check

  rust-clippy:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.BUILD_DEPENDENCIES }}

      - name: Run Clippy
        run: RUSTFLAGS="-D warnings" cargo clippy --workspace --all-targets --all-features

  rust-test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.BUILD_DEPENDENCIES }}

      - name: Run tests
        run: cargo test --workspace --all-features

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [rust-fmt, rust-clippy, rust-test]
    if: always()
    steps:
      - name: Cleanup workspace
        run: |
          echo "Cleaning up Rust workspace..."
          rm -rf target .cargo || true
          echo "Rust cleanup completed"