/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/simulate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate transaction execution
         * @description Simulate a single transaction with comprehensive analysis
         */
        post: operations["simulate_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate multiple independent transactions
         * @description Simulate a batch of independent transactions with comprehensive analysis
         */
        post: operations["simulate_batch_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check the health of the API
         * @description Check the health of the API
         */
        get: operations["check_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Access list entry for gas optimization.
         *
         *     Access lists (EIP-2930) pre-declare storage slots and addresses
         *     that will be accessed, reducing gas costs for those operations. */
        AccessListEntry: {
            /**
             * @description Contract address that will be accessed.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /** @description Storage slots that will be accessed at this address. */
            storageKeys: string[];
        };
        /** @description Detailed error information for failed requests. */
        ApiError: {
            /**
             * @description Machine-readable error code for programmatic handling.
             * @example INVALID_TRANSACTION
             */
            code: string;
            /** @description Additional structured error details. */
            details?: unknown;
            /**
             * @description Human-readable error message.
             * @example Transaction validation failed
             */
            message: string;
            /** @description Suggested resolution or workaround for the error. */
            suggestion?: string | null;
            /** @description Stack trace for debugging (only in debug builds). */
            trace?: string | null;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_HealthStatus: {
            data?: {
                cache: components["schemas"]["CacheHealth"];
                status: string;
                /** Format: int64 */
                uptime: number;
                version: string;
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_SimulationResult: {
            /** @description Complete simulation result containing all execution details.
             *
             *     This is the main response structure for transaction simulation,
             *     containing execution status, gas usage, logs, traces, and any errors. */
            data?: {
                /** @description Generated access list for gas optimization. */
                accessList?: components["schemas"]["AccessListEntry"][] | null;
                /** @description Token balance changes (if tracing enabled). */
                assetChanges?: components["schemas"]["AssetChange"][] | null;
                /**
                 * @description Total gas used in the simulated block.
                 * @example 0x5208
                 */
                blockGasUsed: string;
                /**
                 * @description The final block number after simulation (higher than input if new blocks created).
                 * @example 0x123abd
                 */
                blockNumber: string;
                /** @description Results for each transaction call in the simulation. */
                calls: components["schemas"]["CallResult"][];
                /**
                 * @description Total gas consumed by all calls.
                 * @example 0x5208
                 */
                gasUsed: string;
                performance?: null | components["schemas"]["PerformanceMetrics"];
                /** @description Unique identifier for this simulation. */
                simulationId: string;
                /** @description Overall simulation execution status. */
                status: components["schemas"]["SimulationStatus"];
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_String: {
            data?: string;
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_Vec_SimulationResult: {
            data?: {
                /** @description Generated access list for gas optimization. */
                accessList?: components["schemas"]["AccessListEntry"][] | null;
                /** @description Token balance changes (if tracing enabled). */
                assetChanges?: components["schemas"]["AssetChange"][] | null;
                /**
                 * @description Total gas used in the simulated block.
                 * @example 0x5208
                 */
                blockGasUsed: string;
                /**
                 * @description The final block number after simulation (higher than input if new blocks created).
                 * @example 0x123abd
                 */
                blockNumber: string;
                /** @description Results for each transaction call in the simulation. */
                calls: components["schemas"]["CallResult"][];
                /**
                 * @description Total gas consumed by all calls.
                 * @example 0x5208
                 */
                gasUsed: string;
                performance?: null | components["schemas"]["PerformanceMetrics"];
                /** @description Unique identifier for this simulation. */
                simulationId: string;
                /** @description Overall simulation execution status. */
                status: components["schemas"]["SimulationStatus"];
            }[];
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Token balance change information. */
        AssetChange: {
            /** @description Token contract information. */
            token: components["schemas"]["TokenInfo"];
            /** @description Balance change details. */
            value: components["schemas"]["BalanceChange"];
        };
        /** @description Balance change information showing before/after/difference. */
        BalanceChange: {
            /**
             * @description Net change (post - pre, hex encoded).
             *     Positive means gained, negative means lost.
             * @example 0xf4240
             */
            diff: string;
            /**
             * @description Balance after simulation (hex encoded, smallest unit).
             * @example 0x1e8480
             */
            post: string;
            /**
             * @description Balance before simulation (hex encoded, smallest unit).
             * @example 0xf4240
             */
            pre: string;
        };
        /** @description Block environment overrides for simulation.
         *
         *     These overrides allow modifying the block context in which the simulation runs,
         *     including block number, timestamp, gas parameters, and more. */
        BlockOverrides: {
            /**
             * @description Override the base fee per gas (EIP-1559).
             * @example 0x3b9aca00
             */
            baseFee?: string | null;
            /** @description Custom block hash mappings for the BLOCKHASH opcode.
             *     Maps block numbers to their corresponding block hashes. */
            blockHash?: {
                [key: string]: string;
            } | null;
            /**
             * @description Override the block coinbase (miner/fee recipient).
             * @example 0x0000000000000000000000000000000000000000
             */
            coinbase?: string | null;
            /**
             * @description Override the block difficulty (pre-merge chains).
             * @example 0x0
             */
            difficulty?: string | null;
            /**
             * Format: int64
             * @description Override the block gas limit.
             * @example 30000000
             */
            gasLimit?: number | null;
            /**
             * @description Override the block number.
             *     For `eth_simulateV1`, this will be the first simulated block number.
             *     Note: Different clients use different field names (geth: "number", erigon: "blockNumber").
             * @example 0x1234567
             */
            number?: string | null;
            /**
             * @description Override the prevRandao value (post-merge).
             *     This replaces the difficulty field in post-merge chains.
             * @example 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
             */
            random?: string | null;
            /**
             * Format: int64
             * @description Override the block timestamp (Unix timestamp in seconds).
             *     Note: Different clients use different field names (geth: "time", erigon: "timestamp").
             * @example 1700000000
             */
            time?: number | null;
        };
        /**
         * @description Block tag options for specifying block context.
         * @example latest
         * @enum {string}
         */
        BlockTag: "latest" | "earliest" | "safe" | "finalized";
        CacheHealth: {
            /** Format: int64 */
            latency_ms: number;
            status: string;
        };
        /** @description Detailed error information for failed or reverted calls. */
        CallError: {
            /** @description Contract address where the error occurred. */
            contractAddress?: string | null;
            /**
             * @description Error type classification.
             * @example execution-reverted
             */
            errorType: string;
            /** @description Detailed error message with context. */
            message?: string | null;
            /**
             * @description Human-readable error reason.
             * @example Insufficient balance
             */
            reason: string;
        };
        /** @description Result of a single transaction call within the simulation. */
        CallResult: {
            /**
             * Format: int32
             * @description Index of this call within the simulation.
             */
            callIndex: number;
            error?: null | components["schemas"]["CallError"];
            /**
             * @description Gas consumed by this call.
             * @example 0x5208
             */
            gasUsed: string;
            /** @description Event logs emitted by this call. */
            logs: components["schemas"]["EnhancedLog"][];
            /**
             * @description Data returned by the call (hex encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            returnData: string;
            /** @description Execution status of this specific call. */
            status: components["schemas"]["CallStatus"];
        };
        /**
         * @description Execution status for individual calls.
         * @example success
         * @enum {string}
         */
        CallStatus: "success" | "reverted";
        /** @description Human-readable event information decoded from log data. */
        DecodedEvent: {
            /**
             * @description Human-readable description of the event.
             * @example Token transfer event
             */
            description: string;
            /**
             * @description Event name (e.g., "Transfer", "Approval").
             * @example Transfer
             */
            name: string;
            /** @description Decoded event parameters with names and formatted values. */
            params: components["schemas"]["DecodedEventParam"][];
            /**
             * @description Event signature with types.
             * @example Transfer(address,address,uint256)
             */
            signature: string;
            /**
             * @description Token/protocol standard (e.g., "ERC20", "ERC721", "Uniswap V2").
             * @example ERC20
             */
            standard?: string | null;
            /**
             * @description One-line human-readable summary.
             * @example Transfer 1000.0 USDC from 0x742d... to 0xabc1...
             */
            summary: string;
        };
        /** @description Individual parameter from a decoded event. */
        DecodedEventParam: {
            /** @description Whether this parameter was indexed in the event. */
            indexed: boolean;
            /**
             * @description Parameter name from the ABI.
             * @example from
             */
            name: string;
            /**
             * @description Parameter type (e.g., "address", "uint256", "bool").
             * @example address
             */
            paramType: string;
            /**
             * @description Formatted parameter value.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            value: string;
        };
        /** @description Event log with optional decoded information for better readability. */
        EnhancedLog: {
            /**
             * @description Contract address that emitted this log.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /** @description Block hash containing this log (null for simulations). */
            blockHash?: string | null;
            /** @description Block number containing this log. */
            blockNumber?: string | null;
            /**
             * @description Raw log data (hex encoded).
             * @example 0x00000000000000000000000000000000000000000000000000000000000f4240
             */
            data: string;
            decoded?: null | components["schemas"]["DecodedEvent"];
            /** @description Log index within the transaction. */
            logIndex?: string | null;
            /** @description Whether this log was removed due to chain reorganization. */
            removed: boolean;
            /** @description Array of indexed log topics. */
            topics: string[];
            /** @description Transaction hash that created this log (null for simulations). */
            transactionHash?: string | null;
            /** @description Transaction index within the block (null for simulations). */
            transactionIndex?: string | null;
        };
        /** @description Granular breakdown of gas usage by operation type.
         *
         *     This provides detailed insights into where gas is being consumed,
         *     enabling developers to optimize their contracts and transactions. */
        GasBreakdown: {
            /**
             * @description Gas cost for access list (EIP-2930).
             * @example 1000
             */
            accessList: string;
            /**
             * @description Gas used for external contract calls.
             * @example 5000
             */
            calls: string;
            /**
             * @description Gas used for computation (opcodes execution).
             * @example 15000
             */
            computation: string;
            /**
             * @description Gas used for contract creation.
             * @example 0
             */
            creates: string;
            /**
             * @description Intrinsic transaction cost (21,000 gas base cost).
             * @example 21000
             */
            intrinsic: string;
            /**
             * @description Gas used for emitting event logs.
             * @example 1500
             */
            logs: string;
            /**
             * @description Gas used for memory expansion.
             * @example 3000
             */
            memory: string;
            /**
             * @description Gas refunded due to storage cleanup or other refunds.
             * @example 0
             */
            refund: string;
            /** @description Gas used for storage operations. */
            storage: components["schemas"]["StorageGasBreakdown"];
        };
        HealthStatus: {
            cache: components["schemas"]["CacheHealth"];
            status: string;
            /** Format: int64 */
            uptime: number;
            version: string;
        };
        /** @description Performance metrics for gas profiling and optimization analysis. */
        PerformanceMetrics: {
            /**
             * Format: int64
             * @description Total execution time in milliseconds.
             */
            executionTime: number;
            gasBreakdown?: null | components["schemas"]["GasBreakdown"];
            /**
             * Format: int64
             * @description Peak memory usage during execution (bytes).
             */
            peakMemoryUsage?: number | null;
            /**
             * Format: int64
             * @description Number of storage read operations performed.
             */
            stateReads?: number | null;
            /**
             * Format: int64
             * @description Number of storage write operations performed.
             */
            stateWrites?: number | null;
        };
        /** @description Metadata included with every API response. */
        ResponseMetadata: {
            /**
             * Format: int64
             * @description Total processing time in milliseconds.
             * @example 45
             */
            executionTime?: number | null;
            /**
             * @description Unique identifier for request tracking and correlation.
             * @example req_01234567-89ab-cdef-0123-456789abcdef
             */
            requestId: string;
            /**
             * Format: date-time
             * @description UTC timestamp when the response was generated.
             */
            timestamp: string;
        };
        /** @description Optional parameters for simulation behavior and output. */
        SimulationOptions: {
            blockOverrides?: null | components["schemas"]["BlockOverrides"];
            /** @description State overrides to apply during simulation.
             *     Allows modifying account states before execution. */
            stateOverrides?: components["schemas"]["StateOverride"][] | null;
            traceConfig?: null | components["schemas"]["TraceConfig"];
        };
        /** @description Core simulation parameters including transaction calls and context. */
        SimulationParams: {
            /**
             * @description Optional account address for tracking asset changes.
             *     Required when `traceAssetChanges` or `traceTransfers` is enabled.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            account?: string | null;
            /**
             * @description Block number to simulate against (hex encoded).
             *     This will be the PARENT block for the simulation.
             * @example 0x123abc
             */
            blockNumber?: string | null;
            blockTag?: null | components["schemas"]["BlockTag"];
            /** @description Array of transaction calls to simulate.
             *     Each call represents a transaction that will be executed in the simulation. */
            calls: components["schemas"]["TransactionCall"][];
            /**
             * @description Enable tracking of ERC-20/ERC-721 token balance changes.
             *     Requires `account` parameter to be set.
             * @example false
             */
            traceAssetChanges?: boolean;
            /**
             * @description Enable tracking of ETH transfers as ERC-20-like logs.
             *     ETH transfers will appear with address 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.
             *     Requires `account` parameter to be set.
             * @example false
             */
            traceTransfers?: boolean;
            /**
             * @description Enable or disable EVM validation during simulation.
             *     When false, behaves like `eth_call` with relaxed validation.
             * @example true
             */
            validation?: boolean;
        };
        /** @description Represents a complete simulation request for transaction execution.
         *
         *     This structure encapsulates all parameters needed to simulate a transaction
         *     on the `HyperEVM` network, including the transaction details, block context,
         *     simulation options, and any state or block overrides. */
        SimulationRequest: {
            options?: null | components["schemas"]["SimulationOptions"];
            /** @description The transaction parameters to simulate. */
            params: components["schemas"]["SimulationParams"];
        };
        /** @description Complete simulation result containing all execution details.
         *
         *     This is the main response structure for transaction simulation,
         *     containing execution status, gas usage, logs, traces, and any errors. */
        SimulationResult: {
            /** @description Generated access list for gas optimization. */
            accessList?: components["schemas"]["AccessListEntry"][] | null;
            /** @description Token balance changes (if tracing enabled). */
            assetChanges?: components["schemas"]["AssetChange"][] | null;
            /**
             * @description Total gas used in the simulated block.
             * @example 0x5208
             */
            blockGasUsed: string;
            /**
             * @description The final block number after simulation (higher than input if new blocks created).
             * @example 0x123abd
             */
            blockNumber: string;
            /** @description Results for each transaction call in the simulation. */
            calls: components["schemas"]["CallResult"][];
            /**
             * @description Total gas consumed by all calls.
             * @example 0x5208
             */
            gasUsed: string;
            performance?: null | components["schemas"]["PerformanceMetrics"];
            /** @description Unique identifier for this simulation. */
            simulationId: string;
            /** @description Overall simulation execution status. */
            status: components["schemas"]["SimulationStatus"];
        };
        /**
         * @description Execution status for the overall simulation.
         * @example success
         * @enum {string}
         */
        SimulationStatus: "success" | "reverted" | "failed";
        /** @description State override for a specific account address.
         *
         *     This allows modifying the state of an account before simulation,
         *     including balance, nonce, code, and storage slots. */
        StateOverride: {
            /**
             * @description The account address to override.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            address: string;
            /**
             * @description Override the account's balance (hex encoded wei).
             * @example 0xffffffffffffffff
             */
            balance?: string | null;
            /**
             * @description Override the account's code (hex encoded bytecode).
             *     For EOAs, use "0x" to set empty code.
             * @example 0x6080604052...
             */
            code?: string | null;
            /**
             * @description Move a precompiled contract to this address.
             *     This is an advanced feature for testing precompile behavior.
             * @example 0x0000000000000000000000000000000000000001
             */
            movePrecompileToAddress?: string | null;
            /**
             * Format: int64
             * @description Override the account's nonce.
             * @example 10
             */
            nonce?: number | null;
            /** @description Completely replace the account's storage.
             *     All existing storage will be cleared and replaced with these values.
             *     Cannot be used together with `state_diff`. */
            state?: components["schemas"]["StorageSlot"][] | null;
            /** @description Partially modify the account's storage.
             *     Only specified slots will be changed, others remain unchanged.
             *     Cannot be used together with `state`. */
            stateDiff?: components["schemas"]["StorageSlot"][] | null;
        };
        /** @description Storage operation gas usage breakdown. */
        StorageGasBreakdown: {
            /**
             * @description Gas used for storage read operations (SLOAD).
             * @example 2100
             */
            reads: string;
            /**
             * @description Gas used for storage write operations (SSTORE).
             * @example 20000
             */
            writes: string;
        };
        /** @description Represents a storage slot override. */
        StorageSlot: {
            /**
             * @description The storage slot key (32 bytes, hex encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            slot: string;
            /**
             * @description The storage slot value (32 bytes, hex encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000064
             */
            value: string;
        };
        /** @description Token contract information. */
        TokenInfo: {
            /**
             * @description Token contract address.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /**
             * Format: int32
             * @description Number of decimal places (if available).
             * @example 6
             */
            decimals?: number | null;
            /**
             * @description Token symbol (if available).
             * @example USDC
             */
            symbol?: string | null;
        };
        /** @description Configuration for execution tracing. */
        TraceConfig: {
            /** @description Enable memory capture in traces. */
            enableMemory?: boolean;
            /** @description Enable return data capture in traces. */
            enableReturnData?: boolean;
            /** @description Enable storage capture in traces. */
            enableStorage?: boolean;
            tracer?: null | components["schemas"]["TracerType"];
        };
        /**
         * @description Available tracer types for execution analysis.
         * @example callTracer
         * @enum {string}
         */
        TracerType: "callTracer" | "prestateTracer" | "structLogger";
        /** @description Represents a single transaction call within a simulation. */
        TransactionCall: {
            /**
             * @description The transaction data (calldata).
             *     For simple ETH transfers, this can be empty or "0x".
             * @example 0xa9059cbb000000000000000000000000
             */
            data?: string | null;
            /**
             * @description The sender address of the transaction.
             *     If not specified, the zero address will be used.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            from?: string | null;
            /**
             * @description Gas limit for the transaction (hex encoded).
             *     If not specified, it will be estimated automatically.
             * @example 0x7a120
             */
            gas?: string | null;
            /**
             * @description The recipient address of the transaction.
             *     For contract creation, this should be None/null.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            to?: string | null;
            /**
             * @description The value to send with the transaction in wei (hex encoded).
             * @example 0x0
             */
            value?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    simulate_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimulationRequest"];
            };
        };
        responses: {
            /** @description Simulation completed (success or failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SimulationResult"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    simulate_batch_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimulationRequest"][];
            };
        };
        responses: {
            /** @description Batch simulation completed (includes individual success/failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_Vec_SimulationResult"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    check_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health check successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_HealthStatus"];
                };
            };
            /** @description Health check failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
}
