/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/simulate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate transaction execution
         * @description Simulate a single transaction with comprehensive analysis
         */
        post: operations["simulate_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate/access-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the access list for a transaction
         * @description Get the access list for a transaction
         */
        post: operations["create_access_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate multiple independent transactions
         * @description Simulate a batch of independent transactions with comprehensive analysis
         */
        post: operations["simulate_batch_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check the health of the API
         * @description Check the health of the API
         */
        get: operations["check_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trace/call": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get a transaction trace from a call request
         * @description Get a transaction trace from a call request.
         */
        post: operations["trace_call"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trace/call-many": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trace multiple calls with state context
         * @description Execute debug_trace_call_many to trace multiple calls sequentially with cumulative state changes.
         */
        post: operations["trace_call_many"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trace/tx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Traces a single transaction execution
         * @description Traces a single transaction execution.
         */
        post: operations["trace_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccessList: components["schemas"]["AccessListItem"][];
        AccessListItem: {
            /** @description Account address that would be loaded at the start of execution. */
            address: string;
            /** @description Storage slots that would be accessed by the account. */
            storageKeys: string[];
        };
        /** @description Access list request. This will return the different account and slots that are accessed by the
         *     transaction. */
        AccessListRequest: {
            /**
             * @description The block number or tag.
             * @example 10000000
             */
            block?: string;
            /** @description The transaction parameters to simulate. */
            params: components["schemas"]["TransactionCall"];
        };
        /** @description Access list response. */
        AccessListResponse: {
            /** @description Access list. */
            accessList: components["schemas"]["AccessList"];
            /** @description Error if the transaction failed. */
            error?: string | null;
            /**
             * @description Gas used by the transaction.
             * @example 1000000
             */
            gasUsed: string;
        };
        /** @description Represents the state of an account. */
        AccountState: {
            /**
             * @description Account balance in wei (hex-encoded)
             * @example 0x1bc16d674ec80000
             */
            balance?: string | null;
            /**
             * @description Account bytecode (hex-encoded)
             * @example 0x608060405234801561001057600080fd5b50
             */
            code?: string | null;
            /**
             * Format: int64
             * @description Account nonce
             * @example 42
             */
            nonce?: number | null;
            /** @description Account storage slots (key-value pairs, both hex-encoded) */
            storage?: {
                [key: string]: string;
            };
        };
        /** @description Detailed error information for failed requests. */
        ApiError: {
            /**
             * @description Machine-readable error code for programmatic handling.
             * @example INVALID_TRANSACTION
             */
            code: string;
            /** @description Additional structured error details. */
            details?: unknown;
            /**
             * @description Human-readable error message.
             * @example Transaction validation failed
             */
            message: string;
            /** @description Suggested resolution or workaround for the error. */
            suggestion?: string | null;
            /** @description Stack trace for debugging (only in debug builds). */
            trace?: string | null;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_AccessListResponse: {
            /** @description Access list response. */
            data?: {
                /** @description Access list. */
                accessList: components["schemas"]["AccessList"];
                /** @description Error if the transaction failed. */
                error?: string | null;
                /**
                 * @description Gas used by the transaction.
                 * @example 1000000
                 */
                gasUsed: string;
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_HealthStatus: {
            data?: {
                cache: components["schemas"]["CacheHealth"];
                status: string;
                /** Format: int64 */
                uptime: number;
                version: string;
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_SimulationResult: {
            /** @description Complete simulation result containing all execution details.
             *
             *     This is the main response structure for transaction simulation,
             *     containing execution status, gas usage, logs, traces, and any errors. */
            data?: {
                /** @description Token balance changes (if tracing enabled). */
                assetChanges?: components["schemas"]["AssetChange"][] | null;
                /**
                 * @description Total gas used in the simulated block.
                 * @example 0x5208
                 */
                blockGasUsed: string;
                /**
                 * @description The final block number after simulation (higher than input if new blocks created).
                 * @example 0x123abd
                 */
                blockNumber: string;
                /** @description Results for each transaction call in the simulation. */
                calls: components["schemas"]["CallResult"][];
                /**
                 * @description Total gas consumed by all calls.
                 * @example 0x5208
                 */
                gasUsed: string;
                /** @description Unique identifier for this simulation. */
                simulationId: string;
                /** @description Overall simulation execution status. */
                status: components["schemas"]["SimulationStatus"];
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_String: {
            data?: string;
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_TracerResponse: {
            /** @description Container for all tracer results. */
            data?: {
                "4byteTracer"?: null | components["schemas"]["FourByteResponse"];
                callTracer?: null | components["schemas"]["CallTraceResponse"];
                prestateTracer?: null | components["schemas"]["PrestateTraceResponse"];
                receipt?: null | components["schemas"]["TransactionReceiptInfo"];
                structLogger?: null | components["schemas"]["StructLogResponse"];
            };
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_Vec_SimulationResult: {
            data?: {
                /** @description Token balance changes (if tracing enabled). */
                assetChanges?: components["schemas"]["AssetChange"][] | null;
                /**
                 * @description Total gas used in the simulated block.
                 * @example 0x5208
                 */
                blockGasUsed: string;
                /**
                 * @description The final block number after simulation (higher than input if new blocks created).
                 * @example 0x123abd
                 */
                blockNumber: string;
                /** @description Results for each transaction call in the simulation. */
                calls: components["schemas"]["CallResult"][];
                /**
                 * @description Total gas consumed by all calls.
                 * @example 0x5208
                 */
                gasUsed: string;
                /** @description Unique identifier for this simulation. */
                simulationId: string;
                /** @description Overall simulation execution status. */
                status: components["schemas"]["SimulationStatus"];
            }[];
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Standard API response wrapper for all simulation endpoints.
         *
         *     This provides a consistent response format across the API,
         *     including success/failure indication, data payload, error information,
         *     and request metadata for tracking and debugging. */
        ApiResponse_Vec_TracerResponse: {
            data?: {
                "4byteTracer"?: null | components["schemas"]["FourByteResponse"];
                callTracer?: null | components["schemas"]["CallTraceResponse"];
                prestateTracer?: null | components["schemas"]["PrestateTraceResponse"];
                receipt?: null | components["schemas"]["TransactionReceiptInfo"];
                structLogger?: null | components["schemas"]["StructLogResponse"];
            }[];
            error?: null | components["schemas"]["ApiError"];
            /** @description Request metadata and timing information. */
            metadata: components["schemas"]["ResponseMetadata"];
            /**
             * @description Indicates whether the request was processed successfully.
             * @example true
             */
            success: boolean;
        };
        /** @description Token balance change information. */
        AssetChange: {
            /** @description Token contract information. */
            token: components["schemas"]["TokenInfo"];
            /** @description Balance change details. */
            value: components["schemas"]["BalanceChange"];
        };
        /** @description Balance change information showing before/after/difference. */
        BalanceChange: {
            /**
             * @description Net change (post - pre, hex encoded).
             *     Positive means gained, negative means lost.
             * @example 0xf4240
             */
            diff: string;
            /**
             * @description Balance after simulation (hex encoded, smallest unit).
             * @example 0x1e8480
             */
            post: string;
            /**
             * @description Balance before simulation (hex encoded, smallest unit).
             * @example 0xf4240
             */
            pre: string;
        };
        /** @description Block environment overrides for simulation.
         *
         *     These overrides allow modifying the block context in which the simulation runs,
         *     including block number, timestamp, gas parameters, and more. */
        BlockOverrides: {
            /**
             * @description Override the base fee per gas (EIP-1559).
             * @example 0x3b9aca00
             */
            baseFee?: string | null;
            /** @description Custom block hash mappings for the BLOCKHASH opcode.
             *     Maps block numbers to their corresponding block hashes. */
            blockHash?: {
                [key: string]: string;
            } | null;
            /**
             * @description Override the block coinbase (miner/fee recipient).
             * @example 0x0000000000000000000000000000000000000000
             */
            coinbase?: string | null;
            /**
             * @description Override the block difficulty (pre-merge chains).
             * @example 0x0
             */
            difficulty?: string | null;
            /**
             * Format: int64
             * @description Override the block gas limit.
             * @example 30000000
             */
            gasLimit?: number | null;
            /**
             * @description Override the block number.
             *     For `eth_simulateV1`, this will be the first simulated block number.
             *     Note: Different clients use different field names (geth: "number", erigon: "blockNumber").
             * @example 0x1234567
             */
            number?: string | null;
            /**
             * @description Override the prevRandao value (post-merge).
             *     This replaces the difficulty field in post-merge chains.
             * @example 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
             */
            random?: string | null;
            /**
             * Format: int64
             * @description Override the block timestamp (Unix timestamp in seconds).
             *     Note: Different clients use different field names (geth: "time", erigon: "timestamp").
             * @example 1700000000
             */
            time?: number | null;
        };
        /**
         * @description Block tag options for specifying block context.
         * @example latest
         * @enum {string}
         */
        BlockTag: "latest" | "earliest" | "safe" | "finalized";
        Bundle: {
            blockOverrides?: null | components["schemas"]["BlockOverrides"];
            /** @description The transactions to execute in the bundle. */
            transactions: components["schemas"]["TransactionCall"][];
        };
        CacheHealth: {
            /** Format: int64 */
            latency_ms: number;
            status: string;
        };
        /** @description Detailed error information for failed or reverted calls. */
        CallError: {
            /** @description Contract address where the error occurred. */
            contractAddress?: string | null;
            /**
             * @description Error type classification.
             * @example execution-reverted
             */
            errorType: string;
            /** @description Detailed error message with context. */
            message?: string | null;
            /**
             * @description Human-readable error reason.
             * @example Insufficient balance
             */
            reason: string;
        };
        /** @description Individual call frame in the call trace. */
        CallFrame: {
            /**
             * @description Call type (CALL, DELEGATECALL, STATICCALL, CREATE, etc.).
             * @example CALL
             */
            callType: string;
            /** @description Sub-calls made by this call. */
            calls?: components["schemas"]["CallFrame"][];
            /**
             * Format: int32
             * @description Call depth.
             */
            depth: number;
            /** @description Error message if call failed. */
            error?: string | null;
            /**
             * @description Sender address.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            from: string;
            /**
             * @description Gas provided to the call.
             * @example 0x7a120
             */
            gas: string;
            /**
             * @description Gas used by the call.
             * @example 0x5208
             */
            gasUsed: string;
            /**
             * @description Input data (hex-encoded).
             * @example 0xa9059cbb
             */
            input: string;
            /** @description Logs emitted by this call. */
            logs?: components["schemas"]["LogEntry"][];
            /**
             * @description Output data (hex-encoded).
             * @example 0x01
             */
            output: string;
            /** @description Revert reason if available. */
            revertReason?: string | null;
            /** @description Whether the call reverted. */
            reverted: boolean;
            /**
             * @description Recipient address.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            to?: string | null;
            /**
             * @description Value transferred (hex-encoded wei).
             * @example 0x0
             */
            value: string;
        };
        /** @description Result of a single transaction call within the simulation. */
        CallResult: {
            /**
             * Format: int32
             * @description Index of this call within the simulation.
             */
            callIndex: number;
            error?: null | components["schemas"]["CallError"];
            /**
             * @description Gas consumed by this call.
             * @example 0x5208
             */
            gasUsed: string;
            /** @description Event logs emitted by this call. */
            logs: components["schemas"]["EnhancedLog"][];
            /**
             * @description Data returned by the call (hex encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            returnData: string;
            /** @description Execution status of this specific call. */
            status: components["schemas"]["CallStatus"];
        };
        /**
         * @description Execution status for individual calls.
         * @example success
         * @enum {string}
         */
        CallStatus: "success" | "reverted";
        /** @description Call tracer result with hierarchical call structure. */
        CallTraceResponse: {
            /**
             * Format: int32
             * @description Maximum call depth.
             */
            maxDepth: number;
            /** @description Root call frame. */
            rootCall: components["schemas"]["CallFrame"];
            /**
             * Format: int64
             * @description Total number of calls.
             */
            totalCalls: number;
        };
        CallTracerConfig: {
            /**
             * @description Only trace the top-level call.
             * @default false
             */
            onlyTopCall: boolean;
            /**
             * @description Include event logs in call frames.
             * @default true
             */
            withLogs: boolean;
        };
        /** @description Human-readable event information decoded from log data. */
        DecodedEvent: {
            /**
             * @description Human-readable description of the event.
             * @example Token transfer event
             */
            description: string;
            /**
             * @description Event name (e.g., "Transfer", "Approval").
             * @example Transfer
             */
            name: string;
            /** @description Decoded event parameters with names and formatted values. */
            params: components["schemas"]["DecodedEventParam"][];
            /**
             * @description Event signature with types.
             * @example Transfer(address,address,uint256)
             */
            signature: string;
            /**
             * @description Token/protocol standard (e.g., "ERC20", "ERC721", "Uniswap V2").
             * @example ERC20
             */
            standard?: string | null;
            /**
             * @description One-line human-readable summary.
             * @example Transfer 1000.0 USDC from 0x742d... to 0xabc1...
             */
            summary: string;
        };
        /** @description Individual parameter from a decoded event. */
        DecodedEventParam: {
            /** @description Whether this parameter was indexed in the event. */
            indexed: boolean;
            /**
             * @description Parameter name from the ABI.
             * @example from
             */
            name: string;
            /**
             * @description Parameter type (e.g., "address", "uint256", "bool").
             * @example address
             */
            paramType: string;
            /**
             * @description Formatted parameter value.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            value: string;
        };
        /** @description Event log with optional decoded information for better readability. */
        EnhancedLog: {
            /**
             * @description Contract address that emitted this log.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /** @description Block hash containing this log (null for simulations). */
            blockHash?: string | null;
            /** @description Block number containing this log. */
            blockNumber?: string | null;
            /**
             * @description Raw log data (hex encoded).
             * @example 0x00000000000000000000000000000000000000000000000000000000000f4240
             */
            data: string;
            decoded?: null | components["schemas"]["DecodedEvent"];
            /** @description Log index within the transaction. */
            logIndex?: string | null;
            /** @description Whether this log was removed due to chain reorganization. */
            removed: boolean;
            /** @description Array of indexed log topics. */
            topics: string[];
            /** @description Transaction hash that created this log (null for simulations). */
            transactionHash?: string | null;
            /** @description Transaction index within the block (null for simulations). */
            transactionIndex?: string | null;
        };
        FourByteInfo: {
            /**
             * Format: int64
             * @description Number of times the function was called
             * @example 3
             */
            count: number;
            /**
             * Format: int64
             * @description Function calldata size in bits
             * @example 128
             */
            dataSize: number;
        };
        FourByteResponse: {
            /** @description List of four byte identifiers */
            identifiers?: {
                [key: string]: components["schemas"]["FourByteInfo"];
            };
            /**
             * Format: int64
             * @description Total number of four byte identifiers
             * @example 3
             */
            totalIdentifiers: number;
        };
        HealthStatus: {
            cache: components["schemas"]["CacheHealth"];
            status: string;
            /** Format: int64 */
            uptime: number;
            version: string;
        };
        /** @description Base log entry structure used across different contexts. */
        LogEntry: {
            /**
             * @description Contract address that emitted the log.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /**
             * @description Log data (hex-encoded).
             * @example 0x00000000000000000000000000000000000000000000000000000000000f4240
             */
            data: string;
            /** @description Log topics. */
            topics: string[];
        };
        /** @description Default prestate mode response.
         *     Contains all account states necessary to execute the transaction. */
        PrestateDefaultMode: {
            [key: string]: components["schemas"]["AccountState"];
        };
        /** @description Diff prestate mode response.
         *     Contains the state changes caused by the transaction. */
        PrestateDiffMode: {
            /** @description Account states after the transaction */
            post: {
                [key: string]: components["schemas"]["AccountState"];
            };
            /** @description Account states before the transaction */
            pre: {
                [key: string]: components["schemas"]["AccountState"];
            };
        };
        /** @description Prestate tracer response containing account states.
         *
         *     The prestate tracer has two modes:
         *     - Default mode: Returns accounts necessary to execute the transaction
         *     - Diff mode: Returns the differences between pre and post transaction states */
        PrestateTraceResponse: components["schemas"]["PrestateDefaultMode"] | components["schemas"]["PrestateDiffMode"];
        PrestateTracerConfig: {
            /**
             * @description Enable diff mode to show state changes.
             * @default false
             */
            diffMode: boolean;
            /**
             * @description Disable contract code in results.
             * @default false
             */
            disableCode: boolean;
            /**
             * @description Disable storage tracking (not recommended).
             * @default false
             */
            disableStorage: boolean;
        };
        /** @description Metadata included with every API response. */
        ResponseMetadata: {
            /**
             * Format: int64
             * @description Total processing time in milliseconds.
             * @example 45
             */
            executionTime?: number | null;
            /**
             * @description Unique identifier for request tracking and correlation.
             * @example req_01234567-89ab-cdef-0123-456789abcdef
             */
            requestId: string;
            /**
             * Format: date-time
             * @description UTC timestamp when the response was generated.
             */
            timestamp: string;
        };
        /** @description Optional parameters for simulation behavior and output. */
        SimulationOptions: {
            blockOverrides?: null | components["schemas"]["BlockOverrides"];
            /** @description State overrides to apply during simulation.
             *     Allows modifying account states before execution. */
            stateOverrides?: components["schemas"]["StateOverride"][] | null;
        };
        /** @description Core simulation parameters including transaction calls and context. */
        SimulationParams: {
            /**
             * @description Optional account address for tracking asset changes.
             *     Required when `traceAssetChanges` or `traceTransfers` is enabled.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            account?: string | null;
            /**
             * @description Block number to simulate against (hex encoded).
             *     This will be the PARENT block for the simulation.
             * @example 0x123abc
             */
            blockNumber?: string | null;
            blockTag?: null | components["schemas"]["BlockTag"];
            /** @description Array of transaction calls to simulate.
             *     Each call represents a transaction that will be executed in the simulation. */
            calls: components["schemas"]["TransactionCall"][];
            /**
             * @description Enable tracking of ERC-20/ERC-721 token balance changes.
             *     Requires `account` parameter to be set.
             *
             *     NOTE: This is currently not supported
             *
             *     TODO: Viem logic <https://github.com/wevm/viem/blob/100156844c85989bb8c26ca587da7a62a282136b/src/actions/public/simulateCalls.ts#L166>
             * @example false
             */
            traceAssetChanges?: boolean;
            /**
             * @description Enable tracking of ETH transfers as ERC-20-like logs.
             *     ETH transfers will appear with address 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee.
             *     Requires `account` parameter to be set.
             * @example false
             */
            traceTransfers?: boolean;
            /**
             * @description Enable or disable EVM validation during simulation.
             *     When false, behaves like `eth_call` with relaxed validation.
             * @example true
             */
            validation?: boolean;
        };
        /** @description Represents a complete simulation request for transaction execution.
         *
         *     This structure encapsulates all parameters needed to simulate a transaction
         *     on the `HyperEVM` network, including the transaction details, block context,
         *     simulation options, and any state or block overrides. */
        SimulationRequest: {
            options?: null | components["schemas"]["SimulationOptions"];
            /** @description The transaction parameters to simulate. */
            params: components["schemas"]["SimulationParams"];
        };
        /** @description Complete simulation result containing all execution details.
         *
         *     This is the main response structure for transaction simulation,
         *     containing execution status, gas usage, logs, traces, and any errors. */
        SimulationResult: {
            /** @description Token balance changes (if tracing enabled). */
            assetChanges?: components["schemas"]["AssetChange"][] | null;
            /**
             * @description Total gas used in the simulated block.
             * @example 0x5208
             */
            blockGasUsed: string;
            /**
             * @description The final block number after simulation (higher than input if new blocks created).
             * @example 0x123abd
             */
            blockNumber: string;
            /** @description Results for each transaction call in the simulation. */
            calls: components["schemas"]["CallResult"][];
            /**
             * @description Total gas consumed by all calls.
             * @example 0x5208
             */
            gasUsed: string;
            /** @description Unique identifier for this simulation. */
            simulationId: string;
            /** @description Overall simulation execution status. */
            status: components["schemas"]["SimulationStatus"];
        };
        /**
         * @description Execution status for the overall simulation.
         * @example success
         * @enum {string}
         */
        SimulationStatus: "success" | "reverted" | "failed";
        StateContext: {
            /**
             * @description The block number or tag.
             * @example 10000000
             */
            block?: string;
            /** @description The transaction index in the block. */
            txIndex?: components["schemas"]["TxIndex"];
        };
        /** @description State override for simulation and tracing. */
        StateOverride: {
            /**
             * @description Account address
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            address?: string | null;
            /**
             * @description Account balance override (hex-encoded wei).
             * @example 0x1e8480
             */
            balance?: string | null;
            /**
             * @description Contract code override (hex-encoded).
             * @example 0x608060405234801561001057600080fd5b50
             */
            code?: string | null;
            /** @description Move precompile contract */
            movePrecompileToAddress?: string | null;
            /**
             * Format: int64
             * @description Account nonce override.
             */
            nonce?: number | null;
            /** @description Storage slots */
            state?: components["schemas"]["StorageSlot"][] | null;
            /** @description Differential storage override (modifies specific slots). */
            stateDiff?: {
                [key: string]: string;
            } | null;
            /** @description Complete storage override (replaces all storage). */
            storage?: {
                [key: string]: string;
            } | null;
        };
        /** @description Storage slot definition for state overrides. */
        StorageSlot: {
            /**
             * @description Storage slot key (32 bytes, hex-encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000001
             */
            slot: string;
            /**
             * @description Storage slot value (32 bytes, hex-encoded).
             * @example 0x0000000000000000000000000000000000000000000000000000000000000064
             */
            value: string;
        };
        StructLog: {
            /**
             * Format: int64
             * @description Current call depth
             */
            depth: number;
            /** @description Error message if any */
            error?: string | null;
            /**
             * Format: int64
             * @description remaining gas
             */
            gas: number;
            /**
             * Format: int64
             * @description cost for executing op
             */
            gasCost: number;
            /**
             * Format: int64
             * @description Size of memory.
             */
            memSize?: number | null;
            /** @description ref <https://github.com/ethereum/go-ethereum/blob/366d2169fbc0e0f803b68c042b77b6b480836dbc/eth/tracers/logger/logger.go#L450-L452> */
            memory?: string[] | null;
            /** @description opcode to be executed */
            op: string;
            /**
             * Format: int64
             * @description program counter
             */
            pc: number;
            /**
             * Format: int64
             * @description Refund counter
             */
            refund?: number | null;
            /** @description Last call's return data. Enabled via enableReturnData */
            returnData?: string | null;
            /** @description EVM stack */
            stack?: string[] | null;
            /** @description Storage slots of current contract read from and written to. Only emitted for SLOAD and
             *     SSTORE. Disabled via disableStorage */
            storage?: {
                [key: string]: string;
            } | null;
        };
        /** @description API response for the struct log tracer.
         *
         *     This is the default tracer and the most verbose one.
         *     It's the most useful one for debugging.
         *
         *     Use the [`StructLogResponse::clean`] method to clean the trace. */
        StructLogResponse: {
            /**
             * @description Error message if any
             * @example Transaction execution failed
             */
            error?: string | null;
            /**
             * @description Output of the transaction
             * @example 0x01
             */
            output?: string | null;
            /**
             * Format: int64
             * @description Number of times the gas was refunded
             */
            refundCounter?: number | null;
            /** @description Struct logs */
            structLogs?: components["schemas"]["StructLog"][] | null;
            /**
             * Format: int64
             * @description Total gas used
             */
            totalGas: number;
            /**
             * Format: int64
             * @description Total gas refunded
             * @example 0x1000
             */
            totalGasRefunded?: number | null;
            /**
             * Format: int64
             * @description Total opcodes executed
             */
            totalOpcodes: number;
        };
        StructLoggerConfig: {
            /**
             * @description Clean struct logs to reduce response size.
             * @default true
             */
            cleanStructLogs: boolean;
            /**
             * @description Enable memory capture (disabled by default for performance).
             * @default true
             */
            disableMemory: boolean;
            /**
             * @description Disable return data capture.
             * @default false
             */
            disableReturnData: boolean;
            /**
             * @description Disable stack capture.
             * @default false
             */
            disableStack: boolean;
            /**
             * @description Disable storage capture.
             * @default false
             */
            disableStorage: boolean;
        };
        /** @description Token contract information. */
        TokenInfo: {
            /**
             * @description Token contract address.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            address: string;
            /**
             * Format: int32
             * @description Number of decimal places (if available).
             * @example 6
             */
            decimals?: number | null;
            /**
             * @description Token symbol (if available).
             * @example USDC
             */
            symbol?: string | null;
        };
        /** @description Request to trace many calls. */
        TraceCallManyRequest: {
            /** @description The bundle to trace. */
            bundles: components["schemas"]["Bundle"][];
            /** @description State context to trace against. */
            stateContext?: components["schemas"]["StateContext"];
            /** @description Tracer configuration. */
            tracerConfig?: components["schemas"]["TraceConfig"];
        };
        /** @description Request to trace a call simulation. */
        TraceCallRequest: {
            /**
             * @description Block number or tag to trace against (default: "latest").
             * @example latest
             */
            block?: string;
            blockOverrides?: null | components["schemas"]["BlockOverrides"];
            /** @description Transaction call to trace. */
            call: components["schemas"]["TransactionCall"];
            /** @description State overrides to apply during tracing. */
            stateOverrides?: {
                [key: string]: components["schemas"]["StateOverride"];
            } | null;
            /** @description Trace configuration options. This will used the `callTracer` by default. */
            tracerConfig?: components["schemas"]["TraceConfig"];
        };
        /**
         * Trace Configuration
         * @description Comprehensive trace configuration supporting multiple tracers
         */
        TraceConfig: components["schemas"]["Tracers"];
        /**
         * @description Request to trace a transaction by hash.
         * @example {
         *       "returnReceipt": false,
         *       "tracerConfig": {
         *         "4byteTracer": true,
         *         "callTracer": {
         *           "onlyTopCall": false,
         *           "withLogs": true
         *         },
         *         "prestateTracer": {
         *           "diffMode": true,
         *           "disableCode": false,
         *           "disableStorage": false
         *         },
         *         "structLogger": {
         *           "cleanStructLogs": true,
         *           "disableMemory": true,
         *           "disableReturnData": false,
         *           "disableStack": false,
         *           "disableStorage": false
         *         }
         *       },
         *       "transactionHash": "0xbc4a51bbcbe7550446c151d0d53ee14d5318188e2af1726e28a481b075fc7b4c"
         *     }
         */
        TraceTransactionRequest: {
            /** @description Trace configuration options. */
            tracerConfig?: components["schemas"]["TraceConfig"];
            /**
             * @description Transaction hash to trace.
             * @example 0xbc4a51bbcbe7550446c151d0d53ee14d5318188e2af1726e28a481b075fc7b4c
             */
            transactionHash: string;
        };
        /** @description Container for all tracer results. */
        TracerResponse: {
            "4byteTracer"?: null | components["schemas"]["FourByteResponse"];
            callTracer?: null | components["schemas"]["CallTraceResponse"];
            prestateTracer?: null | components["schemas"]["PrestateTraceResponse"];
            receipt?: null | components["schemas"]["TransactionReceiptInfo"];
            structLogger?: null | components["schemas"]["StructLogResponse"];
        };
        Tracers: {
            /**
             * @description The 4byteTracer collects the function selectors of every function executed in the lifetime
             *     of a transaction, along with the size of the supplied call data. The result is a
             *     [`FourByteFrame`](alloy_rpc_types_trace::geth::four_byte::FourByteFrame) where the keys are
             *     `SELECTOR-CALLDATASIZE` and the values are number of occurrences of this key.
             * @default false
             */
            "4byteTracer": boolean;
            /** @default {
             *       "onlyTopCall": false,
             *       "withLogs": true
             *     } */
            callTracer: null | components["schemas"]["CallTracerConfig"];
            /** @default null */
            prestateTracer: null | components["schemas"]["PrestateTracerConfig"];
            /** @default null */
            structLogger: null | components["schemas"]["StructLoggerConfig"];
        };
        /** @description Represents a single transaction call within a simulation. */
        TransactionCall: {
            accessList?: null | components["schemas"]["AccessList"];
            /**
             * @description The transaction data (calldata).
             *     For simple ETH transfers, this can be empty or "0x".
             * @example 0xa9059cbb000000000000000000000000
             */
            data?: string | null;
            /**
             * @description The sender address of the transaction.
             *     If not specified, the zero address will be used.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            from?: string | null;
            /**
             * @description Gas limit for the transaction (hex encoded).
             *     If not specified, it will be estimated automatically.
             * @example 0x7a120
             */
            gas?: string | null;
            /**
             * @description The recipient address of the transaction.
             *     For contract creation, this should be None/null.
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            to?: string | null;
            /**
             * @description The value to send with the transaction in wei (hex encoded).
             * @example 0x0
             */
            value?: string | null;
        };
        /** @description Transaction receipt information. */
        TransactionReceiptInfo: {
            /**
             * @description Contract address (if contract creation).
             * @example 0x1234567890abcdef1234567890abcdef1234567890
             */
            contractAddress?: string | null;
            /**
             * @description Cumulative gas used in the block at the time of the transaction.
             * @example 0x7a120
             */
            cumulativeGasUsed: string;
            /**
             * @description Effective gas price (hex-encoded wei).
             * @example 0x3b9aca00
             */
            effectiveGasPrice: string;
            /**
             * @description Sender address.
             * @example 0x742d35Cc6634C0532925a3b844Bc9e7595f06e8c
             */
            from: string;
            /**
             * @description Gas used by the transaction.
             * @example 0x5208
             */
            gasUsed: string;
            /**
             * @description Logs bloom filter.
             * @example 0x
             */
            logsBloom: string;
            /**
             * Format: int64
             * @description Number of logs emitted.
             * @example 2
             */
            logsCount: number;
            /**
             * @description Transaction status.
             * @example true
             */
            status: boolean;
            /**
             * @description Recipient address (None for contract creation).
             * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
             */
            to?: string | null;
            /**
             * Format: int32
             * @description Transaction type (0 for legacy, 1 for EIP-2930, 2 for EIP-1559).
             * @example 2
             */
            transactionType: number;
        };
        TxIndex: "-1" | {
            /** @description Transaction given index. */
            Index: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    simulate_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimulationRequest"];
            };
        };
        responses: {
            /** @description Simulation completed (success or failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SimulationResult"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    create_access_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccessListRequest"];
            };
        };
        responses: {
            /** @description Access list request completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_AccessListResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    simulate_batch_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimulationRequest"][];
            };
        };
        responses: {
            /** @description Batch simulation completed (includes individual success/failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_Vec_SimulationResult"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    check_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health check successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_HealthStatus"];
                };
            };
            /** @description Health check failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    trace_call: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TraceCallRequest"];
            };
        };
        responses: {
            /** @description Trace completed (success or failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_TracerResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    trace_call_many: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TraceCallManyRequest"];
            };
        };
        responses: {
            /** @description Trace completed (success or failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_Vec_TracerResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
    trace_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TraceTransactionRequest"];
            };
        };
        responses: {
            /** @description Trace completed (success or failure) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_TracerResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_String"];
                };
            };
        };
    };
}
